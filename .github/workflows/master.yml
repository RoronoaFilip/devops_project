name: CI

on:
  push:
    branches:
      - master

jobs:
  extract-versions:
    uses: ./.github/workflows/extract-versions.yml

  lint:
    needs: [ extract-versions ]
    uses: ./.github/workflows/lint.yml
    with:
      PYTHON_VERSION: ${{ needs.extract-versions.outputs.PYTHON_VERSION }}

  build:
    needs: [ lint, extract-versions ]
    uses: ./.github/workflows/build.yml
    with:
      PYTHON_VERSION: ${{ needs.extract-versions.outputs.PYTHON_VERSION }}

  validate-build:
    needs: [ build, extract-versions ]
    permissions:
      contents: read
      actions: read

    uses: ./.github/workflows/validate-build.yml
    with:
      PYTHON_VERSION: ${{ needs.extract-versions.outputs.PYTHON_VERSION }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker:
    needs: [ validate-build, extract-versions ]
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Download Src Directory
        uses: actions/download-artifact@v4
        with:
          name: src

      - name: Download Dockerfile
        uses: actions/download-artifact@v4
        with:
          name: Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Dockerhub Tag
        run: |
          app_version="${{ needs.extract-versions.outputs.APP_VERSION }}"
          dockerhub_tag="${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_PROJECT }}:${app_version}"
          echo "Dockerhub Tag: ${dockerhub_tag}"
          echo "DOCKERHUB_TAG=${dockerhub_tag}" >> "$GITHUB_ENV"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKERHUB_TAG }}
          build-args: |
            GIT_COMMIT=${{ env.GIT_COMMIT }}

  deploy:
    if: github.event.inputs.action == 'deploy' # Run only if 'deploy' is selected
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Start EC2 Instance
        id: ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0c02fb55956c7d316 \
            --count 1 \
            --instance-type t2.micro \;p[
            --key-name my-key-pair \
            --security-group-ids sg-0abc12345def67890 \
            --subnet-id subnet-0abc12345def67890 \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_WORKSPACE/ec2_instance_id.txt

      - name: Wait for EC2 Instance to be Running
        run: |
          aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 Public IP
        id: ec2-ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_WORKSPACE/ec2_public_ip.txt

      - name: Install Docker on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i my-key-pair.pem ec2-user@${{ env.PUBLIC_IP }} << EOF
            sudo yum update -y
            sudo yum install docker -y
            sudo service docker start
            sudo usermod -aG docker ec2-user
          EOF

      - name: Run Docker Container on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i my-key-pair.pem ec2-user@${{ env.PUBLIC_IP }} << EOF
            docker run -d --name my-container my-docker-image
          EOF

  terminate:
    if: github.event.inputs.action == 'terminate' # Run only if 'terminate' is selected
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Read EC2 Instance ID
        run: |
          INSTANCE_ID=$(cat $GITHUB_WORKSPACE/ec2_instance_id.txt)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Terminate EC2 Instance
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
          aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }}
          echo "EC2 instance ${{ env.INSTANCE_ID }} terminated."
