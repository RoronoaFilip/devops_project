name: CI

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      action:
        description: 'Select an action'
        required: true
        default: 'deploy'
        options:
          - deploy
          - terminate

jobs:

  extract-versions:
    if: github.event.inputs.action != 'terminate'
    uses: ./.github/workflows/extract-versions.yml

  lint:
    uses: ./.github/workflows/lint.yml

  build:
    needs: [ lint ]
    uses: ./.github/workflows/build.yml

  validate-build:
    needs: [ build ]
    permissions:
      contents: read
      actions: read

    uses: ./.github/workflows/validate-build.yml
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker:
    needs: [ extract-versions, validate-build ]
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Download Build Directory
        uses: actions/download-artifact@v4
        with:
          name: build-dir

      - name: Download Dockerfile
        uses: actions/download-artifact@v4
        with:
          name: Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Dockerhub Tag
        run: |
          app_version="${{ needs.extract-versions.outputs.APP_VERSION }}"
          dockerhub_tag="${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_PROJECT }}:${app_version}"

          echo "Dockerhub Tag: ${dockerhub_tag}"
          echo "DOCKERHUB_TAG=${dockerhub_tag}" >> "$GITHUB_ENV"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKERHUB_TAG }}
          build-args: |
            GIT_COMMIT=${{ env.GIT_COMMIT }}

  deploy:
    if: github.event.inputs.action == 'deploy' # Run only if 'deploy' is selected
    needs: [ docker, extract-versions ]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Add SSH Key Pair
        run: |
          echo "Creating SSH key pair file..."

          echo "${{ secrets.EC2_KEY_PAIR }}" > "${{ secrets.EC2_KEY_PAIR_NAME }}.pem"
          chmod 400 "${{ secrets.EC2_KEY_PAIR_NAME }}.pem"

          echo "SSH key pair file created."
          stat "${{ secrets.EC2_KEY_PAIR_NAME }}.pem"

      - name: Start EC2 Instance
        id: ec2
        run: |
          echo "Starting EC2 instance..."

          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ secrets.AWS_AMI_ID }} \
            --count 1 \
            --instance-type ${{ secrets.EC2_INSTANCE_TYPE }} \
            --key-name ${{ secrets.EC2_KEY_PAIR_NAME }} \
            --security-group-ids ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --subnet-id ${{ secrets.AWS_PUBLIC_SUBNET_ID }} \
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "EC2 instance $INSTANCE_ID started."

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for EC2 Instance to be Running
        run: |
          echo "Waiting for EC2 instance to be running..."
          aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}
          echo "EC2 instance is running."

      - name: Commit EC2 Instance ID
        run: |
          echo "${{ env.INSTANCE_ID }}" > ec2_instance_id.txt
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add ec2_instance_id.txt
          git commit -m "Save EC2 Instance ID"
          git push

      - name: Get EC2 Public IP
        id: ec2-ip
        run: |
          echo "Getting EC2 public IP..."
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          if [ "$PUBLIC_IP" == "None" ]; then
            echo "Public IP not available."
            exit 1
          fi

          echo "EC2 public IP: $PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Install and Run Docker Container on EC2
        run: |
          app_version="${{ needs.extract-versions.outputs.APP_VERSION }}"
          dockerhub_tag="${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_PROJECT }}:${app_version}"

          sed -i "s|dockerhubtag|$dockerhub_tag|g" install_and_run_docker_image.sh

          ssh -o SendEnv=DOCKERHUB_TAG -o StrictHostKeyChecking=no -i "${{ secrets.EC2_KEY_PAIR_NAME }}.pem" ec2-user@${{ env.PUBLIC_IP }} < install_and_run_docker_image.sh

      - name: Cleanup Key File
        if: always()
        run: |
          rm -f "${{ secrets.EC2_KEY_PAIR_NAME }}.pem"

  terminate:
    if: github.event.inputs.action == 'terminate' # Run only if 'terminate' is selected
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Read EC2 Instance ID
        run: |
          INSTANCE_ID=$(cat ec2_instance_id.txt)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Terminate EC2 Instance
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
          aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }}
          echo "EC2 instance ${{ env.INSTANCE_ID }} terminated."
